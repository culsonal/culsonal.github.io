import{pbd_update}from"./pbd.mjs";import{make_delunay_tris_from_pts}from"./delunay.mjs";const closest_pt_to_line_segment=([t,e],[[s,r],[a,n]])=>{const[o,l]=[a-s,n-r],[i,c]=[t-s,e-r],_=(i*o+c*l)/(o*o+l*l);return _<0?[s,r]:_>1?[a,n]:[s+(a-s)*_,r+(n-r)*_]},compute_closest_surface_dist=([t,e],s)=>{let r=1/0;for(let a=0;a<s.length/2;a++){const n=s.subarray(2*a,2*a+2),o=a==s.length/2-1?s.subarray(0,2):s.subarray(2*a+2,2*a+4),[l,i]=closest_pt_to_line_segment([t,e],[n,o]),c=Math.hypot(l-t,i-e);c<r&&(r=c)}return r},is_pt_in_poly=([t,e],s)=>{let r=0;for(let a=0;a<s.length;a++){const[n,o]=s.subarray(2*a,2*a+2),[l,i]=a==s.length/2-1?s.subarray(0,2):s.subarray(2*a+2,2*a+4);t<n+(e-o)/(i-o)*(l-n)&&e<o!=e<i&&(r+=1)}return r%2!=0},does_pt_intersect_with_pts=([t,e,s],r,a)=>{for(let n=0;n<r.length/2;n++)if(Math.hypot(r[2*n]-t,r[2*n+1]-e)<a[n]+s)return!0;return!1},ccw=([t,e],[s,r],[a,n])=>(n-e)*(s-t)>(r-e)*(a-t),does_line_segments_intersect=(t,e,s,r)=>ccw(t,s,r)!==ccw(e,s,r)&&ccw(t,e,s)!==ccw(t,e,r),filter_tris=(t,e,s)=>{for(let r=0;r<e.length;r++){const[a,n,o]=e[r],l=[t[2*a],t[2*a+1]],i=[t[2*n],t[2*n+1]],c=[t[2*o],t[2*o+1]];for(let t=0;t<s.length/2;t++){const a=s.subarray(2*t,2*t+2),n=t==s.length/2-1?s.subarray(0,2):s.subarray(2*t+2,2*t+4);(does_line_segments_intersect(l,i,a,n)||does_line_segments_intersect(i,c,a,n)||does_line_segments_intersect(c,l,a,n))&&(e[r][0]=-1)}}for(let t=e.length-1;t>=0;t--)-1===e[t][0]&&e.splice(t,1)},try_to_add_point=(t,e,s)=>{let[r,a,n,o]=[1/0,1/0,-1/0,-1/0];for(let t=0;t<s.length/2;t++){const[e,l]=s.subarray(2*t,2*t+2);e<r&&(r=e),l<a&&(a=l),e>n&&(n=e),l>o&&(o=l)}const[l,i]=[r+(n-r)*Math.random(),a+(o-a)*Math.random()];if(is_pt_in_poly([l,i],s)){const r=.2*compute_closest_surface_dist([l,i],s);if(r<.002)return;does_pt_intersect_with_pts([l,i,r],t,e)||(t.push(l,i),e.push(r))}},fill_pts_in_poly=(t,e=5e3)=>{let[s,r]=[[],[]];for(let a=0;a<e;a++)try_to_add_point(s,r,t);return new Float32Array(s)},radial_poly=(t,e=30)=>{const s=new Float32Array(2*e);for(let r=0;r<e;r++){let a=0;const n=r/(e-1)*6.28;for(let e=0;e<t.length;e++)a+=t[e]*Math.cos(n*e);s.set([a*Math.sin(n),a*Math.cos(n)],2*r)}return s},boob_poly=([t,e]=[.5,.3],s=30)=>{const r=new Float32Array(2*s);for(let a=0;a<s;a++){const n=a/(s-1)*6.28;let[o,l]=[t*Math.sin(n),e*Math.cos(n)];o<0&&(o=0),r.set([o,l],2*a)}return r},draw_poly=(t,e,s="#000",r=2)=>{t.beginPath(),t.strokeStyle=s,t.lineWidth=r;for(let s=0;s<e.length/2;s++){const[r,a]=e.subarray(2*s,2*s+2);t.lineTo((.5*r+.5)*t.canvas.width,(.5*a+.5)*t.canvas.height)}t.stroke()},draw_pts=(t,e,s)=>{for(let r=0;r<e.length/2;r++){const[a,n,o]=[e[2*r],e[2*r+1],s[r]];t.fillRect((.5*a+.5)*t.canvas.width-1,(.5*n+.5)*t.canvas.height-1,2,2),t.beginPath(),t.arc((.5*a+.5)*t.canvas.width,(.5*n+.5)*t.canvas.height,o/2*t.canvas.width,0,6.28),t.stroke()}},draw_tris=(t,e,s,r)=>{const[a,n]=[t.canvas.width,t.canvas.height];for(let o=0;o<s.length;o++)r[o]&&(t.fillStyle=t.strokeStyle="#f9cbd3",t.lineWidth=1,t.beginPath(),t.moveTo((.5*e[2*s[o][0]]+.5)*a,(.5*e[2*s[o][0]+1]+.5)*n),t.lineTo((.5*e[2*s[o][1]]+.5)*a,(.5*e[2*s[o][1]+1]+.5)*n),t.lineTo((.5*e[2*s[o][2]]+.5)*a,(.5*e[2*s[o][2]+1]+.5)*n),t.closePath(),t.stroke(),t.fill(),t.strokeStyle="#000",t.stroke())},ctx=document.getElementById("c").getContext("2d");ctx.canvas.style.width=ctx.canvas.style.height=800,ctx.canvas.width=ctx.canvas.height=2400;const poly=radial_poly([.3,.1*(2*Math.random()-1),.1*(2*Math.random()-1),.1*(2*Math.random()-1),.1*(2*Math.random()-1)]),pts=fill_pts_in_poly(poly),tris=make_delunay_tris_from_pts(pts);filter_tris(pts,tris,poly);const is_active_tri=Array(tris.length).fill(!0),[orig,prev]=[new Float32Array(pts),new Float32Array(pts)],vels=new Float32Array(pts).fill(0),fixed_tris=[];let[mx,my,mpx,mpy,mvx,mvy]=[-1,-1,-1,-1,0,0];ctx.canvas.onmousemove=t=>{const[e,s]=[ctx.canvas.width,ctx.canvas.height];[mpx,mpy,mx,my]=[mx,my,t.offsetX/800*2-1,t.offsetY/800*2-1],[mvx,mvy]=[mx-mpx,my-mpy]};const[lim1,lim2]=[1e11,1.9],[d1,d2]=[.7,.07];let itr=0;const loop=()=>{window.requestAnimationFrame(loop),itr+=1,ctx.clearRect(0,0,ctx.canvas.width,ctx.canvas.height),draw_tris(ctx,pts,tris,is_active_tri),pbd_update(pts,orig,prev,vels,tris,fixed_tris,is_active_tri,[lim1,lim2],[d1,d2],[mx,my,mvx,mvy])};loop();
